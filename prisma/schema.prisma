generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// ENUMS
// ========================

enum Role {
  ADMINISTRADOR
  MEDICO
  ENFERMERA
  PACIENTE
}

// ========================
// MODELS
// ========================

model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  fullname            String
  role                Role           @default(PACIENTE)
  currentPassword     String
  status              String         @default("PENDING") // PENDING, ACTIVE, INACTIVE
  identificationNumber String ?     @unique
  phone               String?
  dateOfBirth         DateTime?
  age                 Int?  
  licenseNumber       String?        
  emergencyContact    String?
  bloodType           String?
  allergies           String?
  chronicDiseases     String?
  verificationCode    String?
  verificationExpires DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relaciones opcionales (solo para staff)
  departmentId        Int?           // Todos los staff (MEDICO, ENFERMERA, ADMINISTRADOR)
  department          Department?    @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  specializationId    Int?           // Solo para MEDICO
  specialization      Specialization? @relation(fields: [specializationId], references: [id], onDelete: SetNull)

  // Relaciones
  auditLogs           AuditLog[]
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Ej: "URGENCIAS", "MEDICINA_INTERNA", "ADMINISTRACION"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model Specialization {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Ej: "CARDIOLOGIA", "PEDIATRIA"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]   // Solo médicos deberían tener esto (lógica en app)
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     // null en eventos como "USER_REGISTER"
  action    String   // Ej: "USER_LOGIN", "USER_REGISTER", "PROFILE_UPDATE"
  details   String?  // JSON serializado con metadata adicional
  timestamp DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}